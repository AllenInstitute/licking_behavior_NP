import os
import numpy as np
import pandas as pd
import collections
import seaborn as sns

import matplotlib.pyplot as plt
from visual_behavior.ophys.dataset.visual_behavior_ophys_dataset import VisualBehaviorOphysDataset
from visual_behavior.ophys.response_analysis.response_analysis import ResponseAnalysis


cache_dir = r'\\allen\programs\braintv\workgroups\nc-ophys\visual_behavior\visual_behavior_production_analysis'


def gen_interlick_df(experiment_list, rew_trig_window= 5):
    """[takes a list of experients, calculates & generates a dataframe with inter lick interval times within a time window of a reward]
    
    Arguments:
       experiment_list {[list]} -- [list of experiments to compile a dataframe for]
    
    Keyword Arguments:
        rew_trig_window {int} -- [window of time in seconds, triggered by reward, to 
            generate inter-lick interval times for] (default: {5})
    
    Returns:
        [dataframe] -- [pandas dataframe with following columns:
                        ["mouse", experiment_id", "reward_time","rew_num", "lick_time", "inter_lick_interval"]
    """
    
    ########### load and compile the data to plot ##############
    
    #create an empty dataframe to fill
    reward_interlick_df= pd.DataFrame(columns=["mouse_id","experiment_id", "reward_time","rew_num", "lick_time", "inter_lick_interval"])
    
    ###go through by experiment and extract the pertinent info
    
    experiment_counter = 1
    experiment_set = set(experiment_list)
    for experiment in experiment_set:
        experiment_id = experiment
        
        #load data with vba package
        
        dataset= VisualBehaviorOphysDataset(experiment_id, cache_dir=cache_dir)
        
        mouse= dataset.metadata.donor_id[0]
        licks = dataset.licks
        licks.rename(index=str, columns={"time": "lick_time"}, inplace = True)
        reward_times = dataset.rewards.time.values
        
        #printing statements
        print("on experiment " + str(experiment_counter) +" of " +str(len(experiment_set)))
        experiment_counter = experiment_counter + 1

        ## go through by reward times and & extract & calculate 
        
        rew_counter = 1
        for reward_time in reward_times:
            current_rew = reward_time
            #create shell df with session id current reward time & number
            rew_lick_df = licks.copy()
            rew_lick_df["reward_time"] = current_rew
            rew_lick_df["experiment_id"] = experiment_id
            rew_lick_df["rew_num"] = rew_counter
            rew_lick_df["mouse_id"] = mouse
            
            print("on reward " + str(rew_counter) +" of " +str(len(reward_times)))
            rew_counter = rew_counter + 1
            
            #create the time window 
            win_start = current_rew
            win_end = win_start + 5
            
            #get licks within a 5 second window of a reward
            rew_lick_df["within_rew_win"] = rew_lick_df["lick_time"].between(win_start, win_end, inclusive = True)
            rew_lick_df = rew_lick_df.loc[rew_lick_df["within_rew_win"]==True]

            #get inter lick times
            rew_lick_df["inter_lick_interval"]= rew_lick_df.lick_time.diff()
            
            #drop un-needed columns
            rew_lick_df = rew_lick_df.drop(["within_rew_win"],axis=1)
            rew_lick_df = rew_lick_df.drop(["frame"], axis=1)
            
            #append main dataframe with reward level df
            reward_interlick_df = reward_interlick_df.append(rew_lick_df)
            
            #drop nan rows (first lick after reward)
            reward_interlick_df = reward_interlick_df.dropna()
    
    return reward_interlick_df

    def plt_interlick_dist(interlick_interval_df):
    """[plots the distribution o fthe inter-lick interval from the interlick interval dataframe produced by the 
            gen_interlick_df function]
    
    Arguments:
        interlick_interval_df {[pandas dataframe]} -- [the interlick interval df generated by the gen_interlick_df function ]
    """

    bloop = sns.distplot(interlick_interval_df.inter_lick_interval)
    bloop.set(xlabel = "inter lick interval (sec)")
    plt.suptitle("inter lick interval")

    plt.show()

    
    
  def plt_interlick_dist_grouped (interlick_interval_df, grp_column="experiment_id", separated = False):
      """[plots the interlick interval separated by group ]
      
      Arguments:
          interlick_interval_df {[pandas dataframe]} -- [the interlick interval df generated by the gen_interlick_df function ]
      
      Keyword Arguments:
          grp_column {str} -- [a column from the interlick interval dataframe to group by] (default: {"experiment_id"})
          separated {bool} -- [separate plots per group or all on the same plot] (default: {False})
      """
    g = sns.FacetGrid(interlick_interval_df, hue = grp_column)
    g = g.map(sns.distplot, "inter_lick_interval", hist = False,  rug = False, 
                  bins = 8).set_axis_labels("inter lick interval (sec)")
    g.add_legend()
    #title
    plt.suptitle("Inter Lick Interval by " + grp_column)
    plt.show()
    
    if separated:
        g = sns.FacetGrid(interlick_interval_df, col = grp_column, hue = grp_column, col_wrap = 4)
        g = g.map(sns.distplot, "inter_lick_interval", rug = True, bins = 8).set_axis_labels("inter lick time (sec)")

        plt.subplots_adjust(top=0.8)
        plt.suptitle("Inter Lick Interval by " + grp_column)
        plt.show()


def gen_lick_trig_run_df(experiment_list, cache_dir, lick_trig_window= 1.0 ):
    
    ########### load and compile the data to plot ##############
    
   
    ###go through by experiment and extract the pertinent info
    
    #create empty lists to fill with data
    experiments = []
    mouse_list = []
    lick_time = []
    running_speed_array = []
    
    
    #start going through each experiment
    experiment_counter = 1
    
    experiment_set = set(experiment_list)#making it a set ensures it's just unique experiments and no repeats 
    for experiment in experiment_set:
        experiment_id = experiment
        
        #load data with vba package
        dataset= VisualBehaviorOphysDataset(experiment_id, cache_dir=cache_dir)
        
        mouse= dataset.metadata.donor_id[0]
        lick_times = dataset.licks.time.values
        running_speed_df = dataset.running_speed.copy()
        
        #drop un-needed columns
        running_speed_df = running_speed_df.drop(["dx"],axis=1)
        running_speed_df = running_speed_df.drop(["v_in"],axis=1)
        running_speed_df = running_speed_df.drop(["v_sig"],axis=1)
        
        #printing statements
        print("on experiment " + str(experiment_counter) +" of " +str(len(experiment_set)))
        experiment_counter = experiment_counter + 1

        ## go through by reward times and & extract & calculate 
        
        lick_counter = 1
        for lick in lick_times:
            current_lick_time = lick
            lick_run_speed = running_speed_df.copy()
            
            #add info to lists
            mouse_list.append(mouse)
            experiments.append(experiment_id)
            lick_time.append(current_lick_time)
            
            print("on lick " + str(lick_counter) +" of " +str(len(lick_times)))
            lick_counter = lick_counter + 1
            
            #create the time window
            half_win = float(lick_trig_window)/2
            win_start = current_lick_time - half_win
            win_end = current_lick_time + half_win
            
            #get running speed values within a window centered on lick
            lick_run_speed["within_rew_win"] = lick_run_speed["time"].between(win_start, win_end, inclusive = True)
            lick_run_speed = lick_run_speed.loc[lick_run_speed["within_rew_win"]==True]
            
            #get just the running speed values & put them in an array
            lick_running_speed = lick_run_speed.running_speed.values
            running_speed_array.append(lick_running_speed)
    
    
    #create a dataframe from dat data!
    lick_runs_df = pd.DataFrame({"experiment_id": experiments, "mouse_id": mouse_list, "lick_time":lick_time, 
                                 "running_trace": running_speed_array})
    
    return lick_runs_df